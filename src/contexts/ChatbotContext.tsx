import React, { createContext, useContext, useState, useEffect } from 'react';
import { useLanguage } from './LanguageContext';

export interface ChatMessage {
  id: string;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
  actions?: ChatAction[];
}

export interface ChatAction {
  id: string;
  label: string;
  labelHindi: string;
  action: () => void;
}

export interface UserProfile {
  name: string;
  village: string;
  ward: string;
  mobile: string;
  farmSize: string;
  primaryCrops: string[];
}

interface ChatbotContextType {
  messages: ChatMessage[];
  isOpen: boolean;
  userProfile: UserProfile;
  addMessage: (content: string, type: 'user' | 'bot', actions?: ChatAction[]) => void;
  openChatbot: () => void;
  closeChatbot: () => void;
  updateProfile: (profile: Partial<UserProfile>) => void;
  clearChat: () => void;
  detectLanguageAndIntent: (input: string) => { language: string; intent: string; isHinglish: boolean };
}

const ChatbotContext = createContext<ChatbotContextType | undefined>(undefined);

export const useChatbot = () => {
  const context = useContext(ChatbotContext);
  if (!context) {
    throw new Error('useChatbot must be used within a ChatbotProvider');
  }
  return context;
};

export const ChatbotProvider = ({ children }: { children: React.ReactNode }) => {
  const { language } = useLanguage();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [isOpen, setIsOpen] = useState(false);
  const [userProfile, setUserProfile] = useState<UserProfile>({
    name: '',
    village: '',
    ward: '',
    mobile: '',
    farmSize: '',
    primaryCrops: []
  });
  const [profileLoaded, setProfileLoaded] = useState(false);

  // Hinglish and intent detection
  const detectLanguageAndIntent = (input: string) => {
    const lowerInput = input.toLowerCase();
    
    // Common Hinglish patterns and rural farming terms
    const hinglishPatterns = [
      /\b(mero|mera|tera|uska|humko|tumko|aapko)\b/,
      /\b(dekho|batao|karo|hoga|hai|nahi|kya|kaise|kahan|kab)\b/,
      /\b(paani|kheti|fasal|beej|khet|gaon|season|time)\b/,
      /\b(according|session|problem|help|chahiye|lagta)\b/
    ];
    
    const isHinglish = hinglishPatterns.some(pattern => pattern.test(lowerInput));
    
    // Intent detection for farming queries
    let intent = 'general';
    if (lowerInput.match(/(weather|mausam|paani|rain|barish)/)) {
      intent = 'weather';
    } else if (lowerInput.match(/(crop|fasal|ugana|grow|dekho|advice|salah)/)) {
      intent = 'crop';
    } else if (lowerInput.match(/(seed|beej|fertilizer|khad|buy|kharidna)/)) {
      intent = 'product';
    } else if (lowerInput.match(/(price|rate|market|mandi|sell|bechna)/)) {
      intent = 'market';
    } else if (lowerInput.match(/(disease|bimari|problem|samasya|pest|kida)/)) {
      intent = 'problem';
    }
    
    const detectedLanguage = isHinglish ? 'hinglish' : (language === 'hi' ? 'hindi' : 'english');
    
    return { language: detectedLanguage, intent, isHinglish };
  };

  // Load profile from localStorage
  useEffect(() => {
    const savedProfile = localStorage.getItem('userProfile');
    if (savedProfile) {
      setUserProfile(JSON.parse(savedProfile));
    }
    setProfileLoaded(true);
  }, []);

  // Save profile to localStorage
  useEffect(() => {
    localStorage.setItem('userProfile', JSON.stringify(userProfile));
  }, [userProfile]);

  // Initial welcome message
  useEffect(() => {
    if (profileLoaded && messages.length === 0) {
      const name = userProfile.name || (language === 'hi' ? 'рдХрд┐рд╕рд╛рди рднрд╛рдИ' : 'Farmer');
      const welcomeMessage = language === 'hi'
        ? `рдирдорд╕реНрддреЗ ${name} рдЬреА! рдореИрдВ рдЖрдкрдХреА рдХреНрдпрд╛ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ? рдЖрдк рдореМрд╕рдо, рдлрд╕рд▓ рд╕рд▓рд╛рд╣, рдпрд╛ рдЙрддреНрдкрд╛рджреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред рдЖрдк рд╣рд┐рдВрдЧреНрд▓рд┐рд╢ рдореЗрдВ рднреА рдмрд╛рдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред`
        : `Namaste ${name}! How can I help you today? You can ask about weather, crop advice, or products. Aap Hinglish mein bhi baat kar sakte hain.`;
      
      addMessage(welcomeMessage, 'bot');
    }
  }, [profileLoaded, language, userProfile.name]);

  const addMessage = (content: string, type: 'user' | 'bot', actions?: ChatAction[]) => {
    const newMessage: ChatMessage = {
      id: Date.now().toString(),
      type,
      content,
      timestamp: new Date(),
      actions
    };
    setMessages(prev => [...prev, newMessage]);
  };

  const openChatbot = () => setIsOpen(true);
  const closeChatbot = () => setIsOpen(false);

  const updateProfile = (profile: Partial<UserProfile>) => {
    setUserProfile(prev => ({ ...prev, ...profile }));
  };

  const clearChat = () => {
    setMessages([]);
    const name = userProfile.name || (language === 'hi' ? 'рдХрд┐рд╕рд╛рди рднрд╛рдИ' : 'Farmer');
    const welcomeMessage = language === 'hi'
      ? `рдирдорд╕реНрддреЗ ${name} рдЬреА! рдореИрдВ рдЖрдкрдХреА рдХреНрдпрд╛ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ? рдЖрдк рдореМрд╕рдо, рдлрд╕рд▓ рд╕рд▓рд╛рд╣, рдпрд╛ рдЙрддреНрдкрд╛рджреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред рдЖрдк рд╣рд┐рдВрдЧреНрд▓рд┐рд╢ рдореЗрдВ рднреА рдмрд╛рдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред`
      : `Namaste ${name}! How can I help you today? You can ask about weather, crop advice, or products. Aap Hinglish mein bhi baat kar sakte hain.`;
    addMessage(welcomeMessage, 'bot');
  };

  const handleProfileUpdate = () => {
    const message = language === 'hi'
      ? 'рдХреГрдкрдпрд╛ рдЕрдкрдиреА рдЬрд╛рдирдХрд╛рд░реА рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВред рдЖрдк рдХреМрди рд╕реА рдЬрд╛рдирдХрд╛рд░реА рдмрджрд▓рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?'
      : 'Please update your information. What would you like to change?';
    
    const actions: ChatAction[] = [
      {
        id: 'name',
        label: 'Name',
        labelHindi: 'рдирд╛рдо',
        action: () => promptForName()
      },
      {
        id: 'village',
        label: 'Village',
        labelHindi: 'рдЧрд╛рдВрд╡',
        action: () => promptForVillage()
      },
      {
        id: 'mobile',
        label: 'Mobile',
        labelHindi: 'рдореЛрдмрд╛рдЗрд▓',
        action: () => promptForMobile()
      },
      {
        id: 'farmSize',
        label: 'Farm Size',
        labelHindi: 'рдЦреЗрдд рдХрд╛ рдЖрдХрд╛рд░',
        action: () => promptForFarmSize()
      }
    ];

    addMessage(message, 'bot', actions);
  };

  const handlePurchaseHistory = () => {
    const history = JSON.parse(localStorage.getItem('purchaseHistory') || '[]');
    const recentHistory = history.slice(0, 5);
    
    if (recentHistory.length === 0) {
      const message = language === 'hi'
        ? 'рдЖрдкрдХрд╛ рдХреЛрдИ рдЦрд░реАрджрд╛рд░реА рдЗрддрд┐рд╣рд╛рд╕ рдирд╣реАрдВ рдорд┐рд▓рд╛ред'
        : 'No purchase history found.';
      addMessage(message, 'bot');
      return;
    }

    const message = language === 'hi'
      ? `рдЖрдкрдХреЗ рдЕрдВрддрд┐рдо ${recentHistory.length} рдСрд░реНрдбрд░:\n\n` + 
        recentHistory.map((order: any, index: number) => 
          `${index + 1}. ${order.invoiceNumber} - тВ╣${order.total.toLocaleString()} (${order.date})`
        ).join('\n')
      : `Your last ${recentHistory.length} orders:\n\n` +
        recentHistory.map((order: any, index: number) => 
          `${index + 1}. ${order.invoiceNumber} - тВ╣${order.total.toLocaleString()} (${order.date})`
        ).join('\n');

    addMessage(message, 'bot');
  };

  const handleCropInfo = () => {
    const message = language === 'hi'
      ? 'рдЖрдк рдХрд┐рд╕ рдлрд╕рд▓ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?'
      : 'Which crop would you like to know about?';
    
    const actions: ChatAction[] = [
      {
        id: 'paddy',
        label: 'Paddy/Rice',
        labelHindi: 'рдзрд╛рди',
        action: () => showCropDetails('paddy')
      },
      {
        id: 'wheat',
        label: 'Wheat',
        labelHindi: 'рдЧреЗрд╣реВрдВ',
        action: () => showCropDetails('wheat')
      },
      {
        id: 'maize',
        label: 'Maize',
        labelHindi: 'рдордХреНрдХрд╛',
        action: () => showCropDetails('maize')
      },
      {
        id: 'sugarcane',
        label: 'Sugarcane',
        labelHindi: 'рдЧрдиреНрдирд╛',
        action: () => showCropDetails('sugarcane')
      }
    ];

    addMessage(message, 'bot', actions);
  };

  const promptForName = () => {
    const message = language === 'hi'
      ? 'рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдирд╛рдо рд▓рд┐рдЦреЗрдВ:'
      : 'Please enter your name:';
    addMessage(message, 'bot');
  };

  const promptForVillage = () => {
    const message = language === 'hi'
      ? 'рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рдЧрд╛рдВрд╡ рдХрд╛ рдирд╛рдо рд▓рд┐рдЦреЗрдВ:'
      : 'Please enter your village name:';
    addMessage(message, 'bot');
  };

  const promptForMobile = () => {
    const message = language === 'hi'
      ? 'рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░ рд▓рд┐рдЦреЗрдВ:'
      : 'Please enter your mobile number:';
    addMessage(message, 'bot');
  };

  const promptForFarmSize = () => {
    const message = language === 'hi'
      ? 'рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рдЦреЗрдд рдХрд╛ рдЖрдХрд╛рд░ рд▓рд┐рдЦреЗрдВ (рдПрдХрдбрд╝ рдореЗрдВ):'
      : 'Please enter your farm size (in acres):';
    addMessage(message, 'bot');
  };

  const showCropDetails = (cropType: string) => {
    const cropInfo: { [key: string]: { hindi: string; english: string } } = {
      paddy: {
        hindi: 'рдзрд╛рди (рдЪрд╛рд╡рд▓)\n\nЁЯМ╛ рдмреБрд╡рд╛рдИ рдХрд╛ рд╕рдордп: рдЬреВрди-рдЬреБрд▓рд╛рдИ\nЁЯМ╛ рдХрдЯрд╛рдИ: рдирд╡рдВрдмрд░-рджрд┐рд╕рдВрдмрд░\nЁЯМ╛ рдЕрд╡рдзрд┐: 120-150 рджрд┐рди\nЁЯМ╛ рд╕рд┐рдВрдЪрд╛рдИ: рдирд┐рдпрдорд┐рдд рдкрд╛рдиреА рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛\nЁЯМ╛ рдЙрддреНрдкрд╛рджрди: 40-60 рдХреНрд╡рд┐рдВрдЯрд▓/рдПрдХрдбрд╝\n\nЁЯТб рд╕реБрдЭрд╛рд╡: рдЕрдЪреНрдЫреА рдЧреБрдгрд╡рддреНрддрд╛ рдХреЗ рдмреАрдЬ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рдФрд░ рд╕рдордп рдкрд░ рдЦрд╛рдж рдбрд╛рд▓реЗрдВред',
        english: 'Paddy (Rice)\n\nЁЯМ╛ Sowing time: June-July\nЁЯМ╛ Harvesting: November-December\nЁЯМ╛ Duration: 120-150 days\nЁЯМ╛ Irrigation: Regular water needed\nЁЯМ╛ Yield: 40-60 quintals/acre\n\nЁЯТб Tip: Use quality seeds and apply fertilizers on time.'
      },
      wheat: {
        hindi: 'рдЧреЗрд╣реВрдВ\n\nЁЯМ╛ рдмреБрд╡рд╛рдИ рдХрд╛ рд╕рдордп: рдирд╡рдВрдмрд░-рджрд┐рд╕рдВрдмрд░\nЁЯМ╛ рдХрдЯрд╛рдИ: рдЕрдкреНрд░реИрд▓-рдордИ\nЁЯМ╛ рдЕрд╡рдзрд┐: 120-150 рджрд┐рди\nЁЯМ╛ рд╕рд┐рдВрдЪрд╛рдИ: 4-5 рдмрд╛рд░\nЁЯМ╛ рдЙрддреНрдкрд╛рджрди: 25-35 рдХреНрд╡рд┐рдВрдЯрд▓/рдПрдХрдбрд╝\n\nЁЯТб рд╕реБрдЭрд╛рд╡: рдЙрдиреНрдирдд рдХрд┐рд╕реНрдо рдХреЗ рдмреАрдЬ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рдФрд░ рдЙрдЪрд┐рдд рдЦрд╛рдж рдкреНрд░рдмрдВрдзрди рдХрд░реЗрдВред',
        english: 'Wheat\n\nЁЯМ╛ Sowing time: November-December\nЁЯМ╛ Harvesting: April-May\nЁЯМ╛ Duration: 120-150 days\nЁЯМ╛ Irrigation: 4-5 times\nЁЯМ╛ Yield: 25-35 quintals/acre\n\nЁЯТб Tip: Use improved varieties and proper fertilizer management.'
      },
      maize: {
        hindi: 'рдордХреНрдХрд╛\n\nЁЯМ╛ рдмреБрд╡рд╛рдИ рдХрд╛ рд╕рдордп: рдЬреВрди-рдЬреБрд▓рд╛рдИ (рдЦрд░реАрдл), рдлрд░рд╡рд░реА-рдорд╛рд░реНрдЪ (рд░рдмреА)\nЁЯМ╛ рдХрдЯрд╛рдИ: рдЕрдХреНрдЯреВрдмрд░-рдирд╡рдВрдмрд░ (рдЦрд░реАрдл)\nЁЯМ╛ рдЕрд╡рдзрд┐: 90-120 рджрд┐рди\nЁЯМ╛ рд╕рд┐рдВрдЪрд╛рдИ: 3-4 рдмрд╛рд░\nЁЯМ╛ рдЙрддреНрдкрд╛рджрди: 25-40 рдХреНрд╡рд┐рдВрдЯрд▓/рдПрдХрдбрд╝\n\nЁЯТб рд╕реБрдЭрд╛рд╡: рд╕рдВрдХрд░ рдХрд┐рд╕реНрдо рдХреЗ рдмреАрдЬ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред',
        english: 'Maize\n\nЁЯМ╛ Sowing time: June-July (Kharif), February-March (Rabi)\nЁЯМ╛ Harvesting: October-November (Kharif)\nЁЯМ╛ Duration: 90-120 days\nЁЯМ╛ Irrigation: 3-4 times\nЁЯМ╛ Yield: 25-40 quintals/acre\n\nЁЯТб Tip: Use hybrid varieties for better yield.'
      },
      sugarcane: {
        hindi: 'рдЧрдиреНрдирд╛\n\nЁЯМ╛ рдмреБрд╡рд╛рдИ рдХрд╛ рд╕рдордп: рдлрд░рд╡рд░реА-рдорд╛рд░реНрдЪ\nЁЯМ╛ рдХрдЯрд╛рдИ: рджрд┐рд╕рдВрдмрд░-рдорд╛рд░реНрдЪ (рдЕрдЧрд▓реЗ рд╕рд╛рд▓)\nЁЯМ╛ рдЕрд╡рдзрд┐: 12-18 рдорд╣реАрдиреЗ\nЁЯМ╛ рд╕рд┐рдВрдЪрд╛рдИ: рдирд┐рдпрдорд┐рдд\nЁЯМ╛ рдЙрддреНрдкрд╛рджрди: 500-800 рдХреНрд╡рд┐рдВрдЯрд▓/рдПрдХрдбрд╝\n\nЁЯТб рд╕реБрдЭрд╛рд╡: рд╕реНрд╡рд╕реНрде рдмреАрдЬ рдЧрдиреНрдиреЗ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рдФрд░ рдЙрдЪрд┐рдд рджреВрд░реА рд░рдЦреЗрдВред',
        english: 'Sugarcane\n\nЁЯМ╛ Sowing time: February-March\nЁЯМ╛ Harvesting: December-March (next year)\nЁЯМ╛ Duration: 12-18 months\nЁЯМ╛ Irrigation: Regular\nЁЯМ╛ Yield: 500-800 quintals/acre\n\nЁЯТб Tip: Use healthy seed cane and maintain proper spacing.'
      }
    };

    const info = cropInfo[cropType];
    const message = language === 'hi' ? info.hindi : info.english;
    addMessage(message, 'bot');
  };

  return (
    <ChatbotContext.Provider value={{
      messages,
      isOpen,
      userProfile,
      addMessage,
      openChatbot,
      closeChatbot,
      updateProfile,
      clearChat,
      detectLanguageAndIntent
    }}>
      {children}
    </ChatbotContext.Provider>
  );
};
